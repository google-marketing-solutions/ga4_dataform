/**
 * Copyright 2024 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

config {
  type: "incremental",
  schema: constants.STAGING_DATASET,
  description: "Staging model for GA4 events_* table. Basic column casting and value extractions are performed here",
  tags: ["all"],
  bigquery: {
    partitionBy: "event_date",
    clusterBy: ["user_pseudo_id", "ga_session_id"]
  }
}

pre_operations {
  declare event_date_checkpoint default (
    ${when(incremental(),
      `select max(event_date) -3 from ${self()}`,
      `select cast('${constants.START_DATE}' as date format 'yyyymmdd')`)
    }
  );
  declare is_active_user bool default null; --to avoid errors on old tables where this field didn't exist

  declare collected_traffic_source struct<manual_campaign_id array<string>,
                                        manual_campaign_name array<string>,
                                        manual_source array<string>,
                                        manual_medium array<string>,
                                        manual_term array<string>,
                                        manual_content array<string>,
                                        gclid array<string>,
                                        dclid array<string>,
                                        srsltid array<string>> default null; --to avoid errors on old tables where this field didn't exist
  ---
  ${when(incremental(),
    `delete from ${self()} where event_date >= event_date_checkpoint`)
  }
}

with
  source as (
    select
      event_timestamp, --utc
      datetime(timestamp_seconds(cast(event_timestamp / 1000000 as int64)), '${constants.REPORTING_TIME_ZONE}') as event_datetime, --ga4 property reporting time zone
      cast(event_date as date format 'yyyymmdd') as event_date, --event_date is already reported in ga4 property reporting time zone
      lower(replace(trim(event_name), " ", "_")) as event_name,
      --event_params,
      event_previous_timestamp,
      event_bundle_sequence_id,
      event_server_timestamp_offset,
      user_id,
      user_pseudo_id,
      --user_properties,
      user_first_touch_timestamp,
      device,
      geo,
      app_info,
      is_active_user,
      (
      select
        as struct traffic_source.source as source,
        traffic_source.medium as medium,
        traffic_source.name as campaign
      ) as traffic_source,
      (
      select
        as struct collected_traffic_source.manual_campaign_id as manual_campaign_id,
        lower(collected_traffic_source.manual_campaign_name) as manual_campaign_name,
        lower(collected_traffic_source.manual_source) as manual_source,
        lower(collected_traffic_source.manual_medium) as manual_medium,
        lower(collected_traffic_source.manual_content) as manual_content,
        lower(collected_traffic_source.manual_term) as manual_term,
        collected_traffic_source.gclid as gclid,
        collected_traffic_source.dclid as dclid
      ) as collected_traffic_source,
      stream_id,
      platform,
      ecommerce,
      items,
      ${helpers.unnestColumn('event_params', 'ga_session_id', 'int_value')} as ga_session_id,
      ${helpers.unnestColumn('event_params', 'page_location')} as page_location,
      ${helpers.unnestColumn('event_params', 'ga_session_number', 'int_value')} as ga_session_number,
      ${helpers.unnestColumn('event_params', 'engagement_time_msec', 'int_value')} as engagement_time_msec,
      ${helpers.unnestColumn('event_params', 'page_title')} as page_title,
      ${helpers.unnestColumn('event_params', 'page_referrer')} as page_referrer,
      CONCAT(user_pseudo_id,${helpers.unnestColumn('event_params', 'ga_session_id', 'int_value')}) as session_id,
      ${helpers.unnestColumn('event_params', 'internal_traffic')} as internal_traffic,
      ${helpers.unnestColumn('event_params', 'environment')} as environment,
      STRUCT(
      ${helpers.unnestColumn('event_params', 'destination_url')} as destination_url,
      ${helpers.unnestColumn('event_params', 'button_text')} as button_text,
      ${helpers.unnestColumn('event_params', 'step_text')} as step_text,
      ${helpers.unnestColumn('event_params', 'sub_step_text')} as sub_step_text,
      ${helpers.unnestColumn('event_params', 'account_purpose')} as account_purpose,
      ${helpers.unnestColumn('event_params', 'status')} as status,
      ${helpers.unnestColumn('event_params', 'top_section')} as top_section,
      ${helpers.unnestColumn('event_params', 'link_text')} as link_text,
      ${helpers.unnestColumn('event_params', 'sub_section')} as sub_section,
      ${helpers.unnestColumn('event_params', 'method')} as method,
      ${helpers.unnestColumn('event_params', 'field')} as field,
      ${helpers.unnestColumn('event_params', 'modification')} as modification,
      ${helpers.unnestColumn('event_params', 'application_type')} as application_type,
      ${helpers.unnestColumn('event_params', 'modified_values')} as modified_values,
      ${helpers.unnestColumn('event_params', 'is_insured')} as is_insured,
      ${helpers.unnestColumn('event_params', 'card_text')} as card_text,
      ${helpers.unnestColumn('event_params', 'search_no_result')} as search_no_result,
      ${helpers.unnestColumn('event_params', 'search_term')} as search_term,
      ${helpers.unnestColumn('event_params', 'repay_other_loans')} as repay_other_loans,
      ${helpers.unnestColumn('event_params', 'co_applicant')} as co_applicant,
      ${helpers.unnestColumn('event_params', 'main_applicant_other_citizenship')} as main_applicant_other_citizenship,
      ${helpers.unnestColumn('event_params', 'main_applicant_taxation_country')} as main_applicant_taxation_country,
      ${helpers.unnestColumn('event_params', 'main_applicant_citizenship')} as main_applicant_citizenship,
      ${helpers.unnestColumn('event_params', 'main_applicant_pep')} as main_applicant_pep,
      ${helpers.unnestColumn('event_params', 'main_applicant_civilState')} as main_applicant_civilState,
      ${helpers.unnestColumn('event_params', 'co_applicant_taxation_country')} as co_applicant_taxation_country,
      ${helpers.unnestColumn('event_params', 'main_applicant_occupation')} as main_applicant_occupation,
      ${helpers.unnestColumn('event_params', 'main_applicant_livingsituation')} as main_applicant_livingsituation,
      ${helpers.unnestColumn('event_params', 'loan_purpose')} as loan_purpose,
      ${helpers.unnestColumn('event_params', 'other_loans')} as other_loans,
      ${helpers.unnestColumn('event_params', 'state')} as state,
      ${helpers.unnestColumn('event_params', 'currency')} as currency,
      ${helpers.unnestColumn('event_params', 'kids_in_household')} as kids_in_household,
      ${helpers.unnestColumn('event_params', 'co_applicant_citizenship')} as co_applicant_citizenship,
      ${helpers.unnestColumn('event_params', 'living_situation')} as living_situation,
      ${helpers.unnestColumn('event_params', 'card_credit_purpose')} as card_credit_purpose,
      ${helpers.unnestColumn('event_params', 'account_credit')} as account_credit,
      ${helpers.unnestColumn('event_params', 'co_applicant_civilState')} as co_applicant_civilState,
      ${helpers.unnestColumn('event_params', 'co_applicant_other_citizenship')} as co_applicant_other_citizenship,
      ${helpers.unnestColumn('event_params', 'co_applicant_pep')} as co_applicant_pep,
      ${helpers.unnestColumn('event_params', 'co_applicant_occupation')} as co_applicant_occupation,
      ${helpers.unnestColumn('event_params', 'faq')} as faq,
      ${helpers.unnestColumn('event_params', 'purpose')} as purpose,
      ${helpers.unnestColumn('event_params', 'account_credit_purpose')} as account_credit_purpose,
      ${helpers.unnestColumn('event_params', 'faq_search_term')} as faq_search_term,
      ${helpers.unnestColumn('event_params', 'loan_protection_type')} as loan_protection_type,
      ${helpers.unnestColumn('event_params', 'error')} as error,
      ${helpers.unnestColumn('event_params', 'main_applicant')} as main_applicant,
      ${helpers.unnestColumn('event_params', 'preliminary_loan_amount_adjust')} as preliminary_loan_amount_adjust,
      ${helpers.unnestColumn('event_params', 'step', 'int_value')} as step,
      ${helpers.unnestColumn('event_params', 'sub_step', 'int_value')} as sub_step,
      ${helpers.unnestColumn('event_params', 'applicants', 'int_value')} as applicants,
      ${helpers.unnestColumn('event_params', 'invoice', 'int_value')} as invoice,
      ${helpers.unnestColumn('event_params', 'external_transfer', 'int_value')} as external_transfer,
      ${helpers.unnestColumn('event_params', 'purchase_amount', 'int_value')} as purchase_amount,
      ${helpers.unnestColumn('event_params', 'amount', 'int_value')} as amount,
      ${helpers.unnestColumn('event_params', 'affect_your_interest_stammis', 'int_value')} as affect_your_interest_stammis,
      ${helpers.unnestColumn('event_params', 'house_type', 'int_value')} as house_type,
      ${helpers.unnestColumn('event_params', 'insurance_company', 'int_value')} as insurance_company,
      ${helpers.unnestColumn('event_params', 'repayment_time_yrs', 'int_value')} as repayment_time_yrs,
      ${helpers.unnestColumn('event_params', 'main_applicant_kids', 'int_value')} as main_applicant_kids,
      ${helpers.unnestColumn('event_params', 'main_applicant_cost_of_living', 'int_value')} as main_applicant_cost_of_living,
      ${helpers.unnestColumn('event_params', 'value', 'int_value')} as value,
      ${helpers.unnestColumn('event_params', 'cost_of_living', 'int_value')} as cost_of_living,
      ${helpers.unnestColumn('event_params', 'housing_cost', 'int_value')} as housing_cost,
      ${helpers.unnestColumn('event_params', 'number_of_kids', 'int_value')} as number_of_kids,
      ${helpers.unnestColumn('event_params', 'card_credit_value', 'int_value')} as card_credit_value,
      ${helpers.unnestColumn('event_params', 'transfer_limit', 'int_value')} as transfer_limit,
      ${helpers.unnestColumn('event_params', 'cost_of_loan_and_credit', 'int_value')} as cost_of_loan_and_credit,
      ${helpers.unnestColumn('event_params', 'account_credit_value', 'int_value')} as account_credit_value,
      ${helpers.unnestColumn('event_params', 'other_loans_amount', 'int_value')} as other_loans_amount
      ) as event_params,
      STRUCT(
      ${helpers.unnestColumn('user_properties', 'has_account')} as has_account,
      ${helpers.unnestColumn('user_properties', 'has_account_disposition')} as has_account_disposition,
      ${helpers.unnestColumn('user_properties', 'has_card')} as has_card,
      ${helpers.unnestColumn('user_properties', 'has_fund')} as has_fund,
      ${helpers.unnestColumn('user_properties', 'has_ica_loyalty_card')} as has_ica_loyalty_card,
      ${helpers.unnestColumn('user_properties', 'has_ica_loyalty_card_debit')} as has_ica_loyalty_card_debit,
      ${helpers.unnestColumn('user_properties', 'has_home_loan')} as has_home_loan,
      ${helpers.unnestColumn('user_properties', 'has_private_loan')} as has_private_loan,
      ${helpers.unnestColumn('user_properties', 'experiment_name_cookie')} as exp_name_cookie,
      ${helpers.unnestColumn('user_properties', 'exp_name_cookie_value')} as exp_name_cookie_value
      ) as user_params,
      (
      select
        as struct lower(${helpers.unnestColumn('event_params', 'source')}) as source,
        lower(${helpers.unnestColumn('event_params', 'medium')}) as medium,
        lower(${helpers.unnestColumn('event_params', 'campaign')}) as campaign,
        lower(${helpers.unnestColumn('event_params', 'content')}) as content,
        lower(${helpers.unnestColumn('event_params', 'term')}) as term,
        ${helpers.unnestColumn('event_params', 'gclid')} as gclid,
        ${helpers.unnestColumn('event_params', 'dclid')} as dclid
      ) as event_traffic_source,
      coalesce( (${helpers.unnestColumn('event_params', 'session_engaged', 'int_value')}),
                (case
                  when (${helpers.unnestColumn('event_params', 'session_engaged')}) = "1" then 1
                end
          ) ) as session_engaged
    from
      ${ref('events_*')}
    where
      _table_suffix not like "%intraday%"
      and _table_suffix not like "%fresh%"
      and cast(_table_suffix as date format 'yyyymmdd') >= event_date_checkpoint
  )
  
select
  *
from
  source